{"version":3,"file":"index.mjs","sources":["../lib/validate.js","../lib/unique.js","../lib/mean_table.js","../lib/mean.js","../lib/print.js","../lib/main.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport hasOwnProp from '@stdlib/assert-has-own-property' ;\nimport isObject from '@stdlib/assert-is-plain-object' ;\nimport { isPrimitive as isNumber } from '@stdlib/assert-is-number' ;\nimport format from '@stdlib/error-tools-fmtprodmsg' ;\nimport isnan from '@stdlib/assert-is-nan' ;\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination object\n* @param {Options} options - function options\n* @param {number} [options.alpha] - significance level\n* @returns {(Error|null)} null or an error object\n*\n* @example\n* var opts = {};\n* var options = {\n*     'alpha': 0.6\n* };\n* var err = validate( opts, options );\n* if ( err ) {\n*     throw err;\n* }\n*/\nfunction validate( opts, options ) {\n\tif ( !isObject( options ) ) {\n\t\treturn new TypeError( format( '0Rj2h', options ) );\n\t}\n\tif ( hasOwnProp( options, 'alpha' ) ) {\n\t\topts.alpha = options.alpha;\n\t\tif ( !isNumber( opts.alpha ) || isnan( opts.alpha ) ) {\n\t\t\treturn new TypeError( format( '0Rj8h', 'alpha', opts.alpha ) );\n\t\t}\n\t\tif ( opts.alpha < 0.0 || opts.alpha > 1.0 ) {\n\t\t\treturn new RangeError( format( 'invalid option. `%s` option must be a number on the interval: [0, 1]. Option: `%f`.', 'alpha', opts.alpha ) );\n\t\t}\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nexport default validate;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// VARIABLES //\n\nvar SORT_OPTS = {\n\t'numeric': true // Use numeric collation such that \"1\" < \"2\" < \"10\"...\n};\n\n\n// FUNCTIONS //\n\n/**\n* Comparator function to sort values in ascending order.\n*\n* @private\n* @param {*} a - first value\n* @param {*} b - second value\n* @returns {number} negative number if `a` comes before `b, positive if `a` comes after `b`, and `0` if they are equivalent\n*/\nfunction ascending( a, b ) {\n\treturn String( a ).localeCompare( String( b ), void 0, SORT_OPTS );\n}\n\n\n// MAIN //\n\n/**\n* Returns the unique elements in an array.\n*\n* @private\n* @param {Array} arr - input array\n* @returns {Array} array of unique elements\n*/\nfunction unique( arr ) {\n\tvar len;\n\tvar out;\n\tvar val;\n\tvar i;\n\tvar j;\n\n\t// Copy the array to avoid mutation:\n\tout = Array.prototype.slice.call( arr );\n\tlen = out.length;\n\n\t// Sort array in ascending order:\n\tout.sort( ascending );\n\n\t// Loop through the array, only incrementing a pointer when successive values are different. When a succeeding value is different, move the pointer and set the next value. In the trivial case where all array elements are unique, we incur a slight penalty in resetting the element value for each unique value. In other cases, we simply move a unique value to a new position in the array. The end result is a sorted array with unique values.\n\tfor ( i = 1, j = 0; i < len; i++ ) {\n\t\tval = out[ i ];\n\t\tif ( out[ j ] !== val ) {\n\t\t\tj += 1;\n\t\t\tout[ j ] = val;\n\t\t}\n\t}\n\t// Truncate the array:\n\tout.length = j+1;\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default unique;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport incrstdev from '@stdlib/stats-incr-stdev' ;\n\n\n// MAIN //\n\n/**\n* Computes the vector of means for each treatment.\n*\n* @private\n* @param {NumericArray} x - measured values\n* @param {Array} factor - array of treatments\n* @param {Array} treats - unique treatments\n* @returns {Object} summary statistics for the categories.\n*/\nfunction meanTable( x, factor, treats ) {\n\tvar tableOfMeans;\n\tvar factorCount;\n\tvar accumulator;\n\tvar newMean;\n\tvar j;\n\tvar i;\n\tvar k;\n\n\tfactorCount = treats.length;\n\ttableOfMeans = {};\n\tfor ( j = 0; j < factorCount; j++ ) {\n\t\taccumulator = incrstdev();\n\t\ttableOfMeans[ treats[j] ] = {\n\t\t\t'mean': 0,\n\t\t\t'sampleSize': 0,\n\t\t\t'SD': accumulator\n\t\t};\n\t\tfor ( i = 0; i < x.length; i++ ) {\n\t\t\tif ( factor[i] === treats[j] ) {\n\t\t\t\ttableOfMeans[ treats[j] ][ 'SD' ] = accumulator( x[i] );\n\t\t\t}\n\t\t}\n\t}\n\t// Go through, add to meanTable by indexing factor[i]\n\t// X[i] is the individual continuous\n\tfor ( i = 0; i < x.length; i++ ) {\n\t\ttableOfMeans[factor[i]]['mean'] += x[i];\n\t\ttableOfMeans[factor[i]]['sampleSize'] += 1;\n\t}\n\n\t// Now make the mean by dividing by the sample size\n\t// Get the standard deviation through the helper function\n\tfor ( k = 0; k < factorCount; k++ ) {\n\t\tnewMean = tableOfMeans[treats[k]]['mean'] / tableOfMeans[treats[k]]['sampleSize'];\n\t\ttableOfMeans[treats[k]]['mean'] = newMean;\n\t}\n\treturn tableOfMeans;\n}\n\n\n// EXPORTS //\n\nexport default meanTable;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Computes the arithmetic mean of a numeric array.\n*\n* @private\n* @param {NumericArray} arr - input array\n* @returns {number} arithmetic mean\n*/\nfunction mean( arr ) {\n\tvar delta;\n\tvar len;\n\tvar mu;\n\tvar i;\n\n\tmu = 0.0;\n\tlen = arr.length;\n\tfor ( i = 0; i < len; i++ ) {\n\t\tdelta = arr[ i ] - mu;\n\t\tmu += delta / (i+1);\n\t}\n\treturn mu;\n}\n\n\n// EXPORTS //\n\nexport default mean;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isPositiveInteger from '@stdlib/assert-is-positive-integer' ;\nimport isObject from '@stdlib/assert-is-plain-object' ;\nimport hasOwnProp from '@stdlib/assert-has-own-property' ;\nimport roundn from '@stdlib/math-base-special-roundn' ;\nimport repeat from '@stdlib/string-repeat' ;\nimport max from '@stdlib/math-base-special-max' ;\nimport { isPrimitive as isBoolean } from '@stdlib/assert-is-boolean' ;\nimport format from '@stdlib/error-tools-fmtprodmsg' ;\n\n\n// FUNCTIONS //\n\n/**\n* Returns n spaces.\n*\n* @private\n* @param {integer} n - number of spaces\n* @returns {string} n spaces\n*/\nfunction spaces( n ) {\n\tif ( n <= 0 ) {\n\t\treturn '';\n\t}\n\treturn repeat( ' ', n );\n}\n\n\n// MAIN //\n\n/**\n* Returns a function to pretty print test results.\n*\n* @private\n* @param {Object} results - test results\n* @returns {Function} pretty print function\n*/\nfunction prettyPrint( results ) {\n\treturn print;\n\n\t/**\n\t* Pretty-print output of ANOVA.\n\t*\n\t* @private\n\t* @param {Object} [opts] - options object\n\t* @param {PositiveInteger} [opts.digits=4] - number of digits after the decimal point\n\t* @param {boolean} [opts.decision=true] - boolean indicating whether to print the test decision\n\t* @throws {TypeError} options argument must be an object\n\t* @throws {TypeError} must provide valid options\n\t* @returns {string} formatted results\n\t*/\n\tfunction print( opts ) {\n\t\tvar statistic;\n\t\tvar decision;\n\t\tvar treatMS;\n\t\tvar treatDF;\n\t\tvar treatSS;\n\t\tvar extra1;\n\t\tvar extra2;\n\t\tvar extra3;\n\t\tvar errMS;\n\t\tvar errDF;\n\t\tvar errSS;\n\t\tvar ndgts;\n\t\tvar dgts;\n\t\tvar str;\n\n\t\tdgts = 4;\n\t\tdecision = true;\n\t\tif ( arguments.length > 0 ) {\n\t\t\tif ( !isObject( opts ) ) {\n\t\t\t\tthrow new TypeError( format( '0Rj3X', opts ) );\n\t\t\t}\n\t\t\tif ( hasOwnProp( opts, 'digits' ) ) {\n\t\t\t\tif ( !isPositiveInteger( opts.digits ) ) {\n\t\t\t\t\tthrow new TypeError( format( '0Rj3b', 'digits', opts.digits ) );\n\t\t\t\t}\n\t\t\t\tdgts = opts.digits;\n\t\t\t}\n\t\t\tif ( hasOwnProp( opts, 'decision' ) ) {\n\t\t\t\tif ( !isBoolean( opts.decision ) ) {\n\t\t\t\t\tthrow new TypeError( format( '0Rj30', 'decision', opts.decision ) );\n\t\t\t\t}\n\t\t\t\tdecision = opts.decision;\n\t\t\t}\n\t\t}\n\t\tndgts = -dgts;\n\n\t\tstr = '';\n\t\tstr += results.method;\n\t\tstr += '\\n\\n';\n\n\t\t// Hypothesis\n\t\tstr += 'Null Hypothesis: All Means Equal';\n\t\tstr += '\\n';\n\t\tstr += 'Alternate Hypothesis: At Least one Mean not Equal';\n\t\tstr += '\\n\\n';\n\n\t\ttreatSS = roundn( results.treatment.ss, ndgts ).toString();\n\t\terrSS = roundn( results.error.ss, ndgts ).toString();\n\t\ttreatMS = roundn( results.treatment.ms, ndgts ).toString();\n\t\terrMS = roundn( results.error.ms, ndgts ).toString();\n\t\ttreatDF = results.treatment.df.toString();\n\t\terrDF = results.error.df.toString();\n\t\tstatistic = roundn( results.statistic, ndgts ).toString();\n\n\t\textra1 = max( max( treatDF.length, errDF.length ), 2 );\n\t\textra2 = max( max( treatSS.length, errSS.length ), 2 );\n\t\textra3 = max( max( treatMS.length, errMS.length ), 3 );\n\n\t\t// Formatted table\n\t\tstr += '              ';\n\t\tstr += 'df';\n\t\tstr += spaces( 1 + extra1 );\n\t\tstr += 'SS';\n\t\tstr += spaces( 2 + extra2 );\n\t\tstr += 'MS';\n\t\tstr += spaces( 1 + extra3 );\n\t\tstr += 'F Score';\n\t\tstr += spaces( max( 7, statistic.length ) - 7 + 2 );\n\t\tstr += 'P Value';\n\t\tstr += '\\n';\n\n\t\t// Now start adding in values\n\t\tstr += 'Treatment';\n\t\tstr += spaces( 5 );\n\t\tstr += results.treatment.df;\n\t\tstr += spaces( 3 + extra1 - treatDF.length );\n\n\t\tstr += treatSS;\n\t\tstr += spaces( 4 + extra2 - treatSS.length );\n\t\tstr += treatMS;\n\t\tstr += spaces( 3 + extra3 - treatMS.length );\n\t\tstr += statistic;\n\t\tstr += spaces( max( 7, statistic.length ) - statistic.length + 2 );\n\t\tstr += roundn( results.pValue, ndgts );\n\t\tstr += '\\n';\n\n\t\t// Next line\n\t\tstr += 'Errors';\n\t\tstr += '        ';\n\t\tstr += results.error.df;\n\t\tstr += spaces( 3 + extra1 - errDF.length );\n\t\tstr += errSS;\n\t\tstr += spaces( 4 + extra2 - errSS.length );\n\t\tstr += errMS;\n\n\t\tif ( decision ) {\n\t\t\tstr += '\\n\\n';\n\t\t\tif ( results.rejected ) {\n\t\t\t\tstr += 'Reject Null: ';\n\t\t\t\tstr += roundn( results.pValue, ndgts );\n\t\t\t\tstr += ' <= ';\n\t\t\t\tstr += results.alpha;\n\t\t\t} else {\n\t\t\t\tstr += 'Fail to Reject Null: ';\n\t\t\t\tstr += roundn( results.pValue, ndgts );\n\t\t\t\tstr += ' >= ';\n\t\t\t\tstr += results.alpha;\n\t\t\t}\n\t\t}\n\t\treturn str;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default prettyPrint;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { primitives as isNumberArray } from '@stdlib/assert-is-number-array' ;\nimport isTypedArrayLike from '@stdlib/assert-is-typed-array-like' ;\nimport isArray from '@stdlib/assert-is-array' ;\nimport setReadOnly from '@stdlib/utils-define-read-only-property' ;\nimport hasOwnProp from '@stdlib/assert-has-own-property' ;\nimport format from '@stdlib/error-tools-fmtprodmsg' ;\nimport cdf from '@stdlib/stats-base-dists-f-cdf' ;\nimport copy from '@stdlib/utils-copy' ;\nimport defaults from './defaults.json' ;\nimport validate from './validate.js' ;\nimport unique from './unique.js' ;\nimport meanTable from './mean_table.js' ;\nimport mean from './mean.js' ;\nimport prettyPrint from './print.js' ;\n\n\n// MAIN //\n\n/**\n* Perform a one-way analysis of variance (ANOVA).\n*\n* @param {NumericArray} x - measured values\n* @param {Array} factor - array of treatments\n* @param {Options} [options] - function options\n* @param {number} [options.alpha=0.05] - significance level\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {TypeError} first argument must be a numeric array\n* @throws {TypeError} second argument must be an array\n* @throws {RangeError} `factor` must contain at least two unique elements\n* @throws {RangeError} length of `x` must be greater than or equal to two\n* @throws {RangeError} `x` and `factor` must have the same length\n* @returns {Object} test results\n*/\nfunction anova1( x, factor, options ) {\n\tvar meanSumSqTreat; // Mean sum of squares\n\tvar meanSumSqError;\n\tvar ssTreatment;\n\tvar sumSqTotal;\n\tvar sumSqError;\n\tvar treatment; // Index variable\n\tvar grandMean;\n\tvar nGroups;\n\tvar fScore;\n\tvar treats;\n\tvar means;\n\tvar numDf;\n\tvar denDf;\n\tvar nobs;\n\tvar pVal;\n\tvar opts;\n\tvar err;\n\tvar out;\n\tvar sq;\n\tvar i;\n\n\tif ( !isTypedArrayLike( x ) && !isNumberArray( x ) ) {\n\t\tthrow new TypeError( format( '0Rj8j', x ) );\n\t}\n\topts = copy( defaults );\n\tif ( arguments.length > 2 ) {\n\t\terr = validate( opts, options );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t}\n\tnobs = x.length;\n\tif ( nobs <= 1 ) {\n\t\tthrow new RangeError( format( '0RjAn', x ) );\n\t}\n\tif ( !isArray( factor ) ) {\n\t\tthrow new TypeError( format( '0Rj8l', treats ) );\n\t}\n\n\ttreats = unique( factor );\n\tnGroups = treats.length;\n\tif ( nGroups <= 1 ) {\n\t\tthrow new RangeError( format( '0Rj8m', treats ) );\n\t}\n\tif ( nobs !== factor.length ) {\n\t\tthrow new RangeError( 'invalid arguments. First and second arguments must be arrays having the same length.' );\n\t}\n\n\tsumSqTotal = 0.0;\n\tssTreatment = 0.0;\n\tmeans = meanTable( x, factor, treats );\n\tgrandMean = mean( x );\n\n\t// Now get total ss:\n\tfor ( i = 0; i < nobs; i++ ) {\n\t\tsq = ( x[i] - grandMean ) * ( x[i] - grandMean );\n\t\tsumSqTotal += sq;\n\t}\n\n\tsq = 0.0;\n\tfor ( treatment in means ) {\n\t\tif ( hasOwnProp( means, treatment ) ) {\n\t\t\t// Already have sq defined\n\t\t\tsq = ( means[treatment].mean - grandMean ) *\n\t\t\t\t( means[treatment].mean - grandMean );\n\t\t\tssTreatment += means[treatment].sampleSize * sq;\n\t\t}\n\t}\n\tnumDf = nGroups - 1;\n\tdenDf = nobs - nGroups;\n\tsumSqError = sumSqTotal - ssTreatment;\n\tmeanSumSqTreat = ssTreatment / numDf;\n\tmeanSumSqError = sumSqError / denDf;\n\tfScore = meanSumSqTreat / meanSumSqError;\n\n\tpVal = 1.0 - cdf( fScore, numDf, denDf );\n\n\tout = {};\n\n\ttreatment = {};\n\tsetReadOnly( treatment, 'df', numDf );\n\tsetReadOnly( treatment, 'ss', ssTreatment );\n\tsetReadOnly( treatment, 'ms', meanSumSqTreat );\n\tsetReadOnly( out, 'treatment', treatment );\n\n\terr = {};\n\tsetReadOnly( err, 'df', denDf );\n\tsetReadOnly( err, 'ss', sumSqError );\n\tsetReadOnly( err, 'ms', meanSumSqError );\n\tsetReadOnly( out, 'error', err );\n\n\tsetReadOnly( out, 'statistic', fScore );\n\tsetReadOnly( out, 'pValue', pVal );\n\tsetReadOnly( out, 'means', means );\n\tsetReadOnly( out, 'method', 'One-Way ANOVA' );\n\tsetReadOnly( out, 'alpha', opts.alpha );\n\tsetReadOnly( out, 'rejected', pVal <= opts.alpha );\n\tsetReadOnly( out, 'print', prettyPrint( out ) );\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default anova1;\n"],"names":["validate","opts","options","isObject","TypeError","format","hasOwnProp","alpha","isNumber","isnan","RangeError","SORT_OPTS","numeric","ascending","a","b","String","localeCompare","unique","arr","len","out","val","i","j","Array","prototype","slice","call","length","sort","meanTable","x","factor","treats","tableOfMeans","factorCount","accumulator","newMean","k","incrstdev","mean","sampleSize","SD","mu","spaces","n","repeat","prettyPrint","results","statistic","decision","treatMS","treatDF","treatSS","extra1","extra2","extra3","errMS","errDF","errSS","ndgts","dgts","str","arguments","isPositiveInteger","digits","isBoolean","method","roundn","treatment","ss","toString","error","ms","df","max","pValue","rejected","anova1","meanSumSqTreat","meanSumSqError","ssTreatment","sumSqTotal","sumSqError","grandMean","nGroups","fScore","means","numDf","denDf","nobs","pVal","err","sq","isTypedArrayLike","isNumberArray","copy","defaults","isArray","cdf","setReadOnly"],"mappings":"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"}