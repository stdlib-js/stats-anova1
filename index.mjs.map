{"version":3,"file":"index.mjs","sources":["../lib/unique.js","../lib/print.js","../lib/main.js","../lib/defaults.js","../lib/validate.js","../lib/mean_table.js","../lib/mean.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// VARIABLES //\n\nvar SORT_OPTS = {\n\t'numeric': true // Use numeric collation such that \"1\" < \"2\" < \"10\"...\n};\n\n\n// FUNCTIONS //\n\n/**\n* Comparator function to sort values in ascending order.\n*\n* @private\n* @param {*} a - first value\n* @param {*} b - second value\n* @returns {number} negative number if `a` comes before `b, positive if `a` comes after `b`, and `0` if they are equivalent\n*/\nfunction ascending( a, b ) {\n\treturn String( a ).localeCompare( String( b ), void 0, SORT_OPTS );\n}\n\n\n// MAIN //\n\n/**\n* Returns the unique elements in an array.\n*\n* @private\n* @param {Array} arr - input array\n* @returns {Array} array of unique elements\n*/\nfunction unique( arr ) {\n\tvar len;\n\tvar out;\n\tvar val;\n\tvar i;\n\tvar j;\n\n\t// Copy the array to avoid mutation:\n\tout = Array.prototype.slice.call( arr );\n\tlen = out.length;\n\n\t// Sort array in ascending order:\n\tout.sort( ascending );\n\n\t// Loop through the array, only incrementing a pointer when successive values are different. When a succeeding value is different, move the pointer and set the next value. In the trivial case where all array elements are unique, we incur a slight penalty in resetting the element value for each unique value. In other cases, we simply move a unique value to a new position in the array. The end result is a sorted array with unique values.\n\tfor ( i = 1, j = 0; i < len; i++ ) {\n\t\tval = out[ i ];\n\t\tif ( out[ j ] !== val ) {\n\t\t\tj += 1;\n\t\t\tout[ j ] = val;\n\t\t}\n\t}\n\t// Truncate the array:\n\tout.length = j+1;\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default unique;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isPositiveInteger from '@stdlib/assert-is-positive-integer';\nimport isObject from '@stdlib/assert-is-plain-object';\nimport hasOwnProp from '@stdlib/assert-has-own-property';\nimport roundn from '@stdlib/math-base-special-roundn';\nimport repeat from '@stdlib/string-repeat';\nimport max from '@stdlib/math-base-special-max';\nimport { isPrimitive as isBoolean } from '@stdlib/assert-is-boolean';\nimport format from '@stdlib/error-tools-fmtprodmsg';\n\n\n// FUNCTIONS //\n\n/**\n* Returns n spaces.\n*\n* @private\n* @param {integer} n - number of spaces\n* @returns {string} n spaces\n*/\nfunction spaces( n ) {\n\tif ( n <= 0 ) {\n\t\treturn '';\n\t}\n\treturn repeat( ' ', n );\n}\n\n\n// MAIN //\n\n/**\n* Returns a function to pretty print test results.\n*\n* @private\n* @param {Object} results - test results\n* @returns {Function} pretty print function\n*/\nfunction prettyPrint( results ) {\n\treturn print;\n\n\t/**\n\t* Pretty-print output of ANOVA.\n\t*\n\t* @private\n\t* @param {Object} [opts] - options object\n\t* @param {PositiveInteger} [opts.digits=4] - number of digits after the decimal point\n\t* @param {boolean} [opts.decision=true] - boolean indicating whether to print the test decision\n\t* @throws {TypeError} options argument must be an object\n\t* @throws {TypeError} must provide valid options\n\t* @returns {string} formatted results\n\t*/\n\tfunction print( opts ) {\n\t\tvar statistic;\n\t\tvar decision;\n\t\tvar treatMS;\n\t\tvar treatDF;\n\t\tvar treatSS;\n\t\tvar extra1;\n\t\tvar extra2;\n\t\tvar extra3;\n\t\tvar errMS;\n\t\tvar errDF;\n\t\tvar errSS;\n\t\tvar ndgts;\n\t\tvar dgts;\n\t\tvar str;\n\n\t\tdgts = 4;\n\t\tdecision = true;\n\t\tif ( arguments.length > 0 ) {\n\t\t\tif ( !isObject( opts ) ) {\n\t\t\t\tthrow new TypeError( format( '0tf3L', opts ) );\n\t\t\t}\n\t\t\tif ( hasOwnProp( opts, 'digits' ) ) {\n\t\t\t\tif ( !isPositiveInteger( opts.digits ) ) {\n\t\t\t\t\tthrow new TypeError( format( '0tf3P', 'digits', opts.digits ) );\n\t\t\t\t}\n\t\t\t\tdgts = opts.digits;\n\t\t\t}\n\t\t\tif ( hasOwnProp( opts, 'decision' ) ) {\n\t\t\t\tif ( !isBoolean( opts.decision ) ) {\n\t\t\t\t\tthrow new TypeError( format( '0tf2o', 'decision', opts.decision ) );\n\t\t\t\t}\n\t\t\t\tdecision = opts.decision;\n\t\t\t}\n\t\t}\n\t\tndgts = -dgts;\n\n\t\tstr = '';\n\t\tstr += results.method;\n\t\tstr += '\\n\\n';\n\n\t\t// Hypothesis\n\t\tstr += 'Null Hypothesis: All Means Equal';\n\t\tstr += '\\n';\n\t\tstr += 'Alternate Hypothesis: At Least one Mean not Equal';\n\t\tstr += '\\n\\n';\n\n\t\ttreatSS = roundn( results.treatment.ss, ndgts ).toString();\n\t\terrSS = roundn( results.error.ss, ndgts ).toString();\n\t\ttreatMS = roundn( results.treatment.ms, ndgts ).toString();\n\t\terrMS = roundn( results.error.ms, ndgts ).toString();\n\t\ttreatDF = results.treatment.df.toString();\n\t\terrDF = results.error.df.toString();\n\t\tstatistic = roundn( results.statistic, ndgts ).toString();\n\n\t\textra1 = max( max( treatDF.length, errDF.length ), 2 );\n\t\textra2 = max( max( treatSS.length, errSS.length ), 2 );\n\t\textra3 = max( max( treatMS.length, errMS.length ), 3 );\n\n\t\t// Formatted table\n\t\tstr += '              ';\n\t\tstr += 'df';\n\t\tstr += spaces( 1 + extra1 );\n\t\tstr += 'SS';\n\t\tstr += spaces( 2 + extra2 );\n\t\tstr += 'MS';\n\t\tstr += spaces( 1 + extra3 );\n\t\tstr += 'F Score';\n\t\tstr += spaces( max( 7, statistic.length ) - 7 + 2 );\n\t\tstr += 'P Value';\n\t\tstr += '\\n';\n\n\t\t// Now start adding in values\n\t\tstr += 'Treatment';\n\t\tstr += spaces( 5 );\n\t\tstr += results.treatment.df;\n\t\tstr += spaces( 3 + extra1 - treatDF.length );\n\n\t\tstr += treatSS;\n\t\tstr += spaces( 4 + extra2 - treatSS.length );\n\t\tstr += treatMS;\n\t\tstr += spaces( 3 + extra3 - treatMS.length );\n\t\tstr += statistic;\n\t\tstr += spaces( max( 7, statistic.length ) - statistic.length + 2 );\n\t\tstr += roundn( results.pValue, ndgts );\n\t\tstr += '\\n';\n\n\t\t// Next line\n\t\tstr += 'Errors';\n\t\tstr += '        ';\n\t\tstr += results.error.df;\n\t\tstr += spaces( 3 + extra1 - errDF.length );\n\t\tstr += errSS;\n\t\tstr += spaces( 4 + extra2 - errSS.length );\n\t\tstr += errMS;\n\n\t\tif ( decision ) {\n\t\t\tstr += '\\n\\n';\n\t\t\tif ( results.rejected ) {\n\t\t\t\tstr += 'Reject Null: ';\n\t\t\t\tstr += roundn( results.pValue, ndgts );\n\t\t\t\tstr += ' <= ';\n\t\t\t\tstr += results.alpha;\n\t\t\t} else {\n\t\t\t\tstr += 'Fail to Reject Null: ';\n\t\t\t\tstr += roundn( results.pValue, ndgts );\n\t\t\t\tstr += ' >= ';\n\t\t\t\tstr += results.alpha;\n\t\t\t}\n\t\t}\n\t\treturn str;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default prettyPrint;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { primitives as isNumberArray } from '@stdlib/assert-is-number-array';\nimport isTypedArrayLike from '@stdlib/assert-is-typed-array-like';\nimport isArray from '@stdlib/assert-is-array';\nimport setReadOnly from '@stdlib/utils-define-read-only-property';\nimport hasOwnProp from '@stdlib/assert-has-own-property';\nimport format from '@stdlib/error-tools-fmtprodmsg';\nimport cdf from '@stdlib/stats-base-dists-f-cdf';\nimport defaults from './defaults.js';\nimport validate from './validate.js';\nimport unique from './unique.js';\nimport meanTable from './mean_table.js';\nimport mean from './mean.js';\nimport prettyPrint from './print.js';\n\n\n// MAIN //\n\n/**\n* Perform a one-way analysis of variance (ANOVA).\n*\n* @param {NumericArray} x - measured values\n* @param {Array} factor - array of treatments\n* @param {Options} [options] - function options\n* @param {number} [options.alpha=0.05] - significance level\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {TypeError} first argument must be a numeric array\n* @throws {TypeError} second argument must be an array\n* @throws {RangeError} `factor` must contain at least two unique elements\n* @throws {RangeError} length of `x` must be greater than or equal to two\n* @throws {RangeError} `x` and `factor` must have the same length\n* @returns {Object} test results\n*/\nfunction anova1( x, factor, options ) {\n\tvar meanSumSqTreat; // Mean sum of squares\n\tvar meanSumSqError;\n\tvar ssTreatment;\n\tvar sumSqTotal;\n\tvar sumSqError;\n\tvar treatment; // Index variable\n\tvar grandMean;\n\tvar nGroups;\n\tvar fScore;\n\tvar treats;\n\tvar means;\n\tvar numDf;\n\tvar denDf;\n\tvar nobs;\n\tvar pVal;\n\tvar opts;\n\tvar err;\n\tvar out;\n\tvar sq;\n\tvar i;\n\n\tif ( !isTypedArrayLike( x ) && !isNumberArray( x ) ) {\n\t\tthrow new TypeError( format( '0tf8R', x ) );\n\t}\n\topts = defaults();\n\tif ( arguments.length > 2 ) {\n\t\terr = validate( opts, options );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t}\n\tnobs = x.length;\n\tif ( nobs <= 1 ) {\n\t\tthrow new RangeError( format( '0tfA2', x ) );\n\t}\n\tif ( !isArray( factor ) ) {\n\t\tthrow new TypeError( format( '0tf8T', treats ) );\n\t}\n\n\ttreats = unique( factor );\n\tnGroups = treats.length;\n\tif ( nGroups <= 1 ) {\n\t\tthrow new RangeError( format( '0tf8U', treats ) );\n\t}\n\tif ( nobs !== factor.length ) {\n\t\tthrow new RangeError( format('0tf1F') );\n\t}\n\n\tsumSqTotal = 0.0;\n\tssTreatment = 0.0;\n\tmeans = meanTable( x, factor, treats );\n\tgrandMean = mean( x );\n\n\t// Now get total ss:\n\tfor ( i = 0; i < nobs; i++ ) {\n\t\tsq = ( x[i] - grandMean ) * ( x[i] - grandMean );\n\t\tsumSqTotal += sq;\n\t}\n\n\tsq = 0.0;\n\tfor ( treatment in means ) {\n\t\tif ( hasOwnProp( means, treatment ) ) {\n\t\t\t// Already have sq defined\n\t\t\tsq = ( means[treatment].mean - grandMean ) *\n\t\t\t\t( means[treatment].mean - grandMean );\n\t\t\tssTreatment += means[treatment].sampleSize * sq;\n\t\t}\n\t}\n\tnumDf = nGroups - 1;\n\tdenDf = nobs - nGroups;\n\tsumSqError = sumSqTotal - ssTreatment;\n\tmeanSumSqTreat = ssTreatment / numDf;\n\tmeanSumSqError = sumSqError / denDf;\n\tfScore = meanSumSqTreat / meanSumSqError;\n\n\tpVal = 1.0 - cdf( fScore, numDf, denDf );\n\n\tout = {};\n\n\ttreatment = {};\n\tsetReadOnly( treatment, 'df', numDf );\n\tsetReadOnly( treatment, 'ss', ssTreatment );\n\tsetReadOnly( treatment, 'ms', meanSumSqTreat );\n\tsetReadOnly( out, 'treatment', treatment );\n\n\terr = {};\n\tsetReadOnly( err, 'df', denDf );\n\tsetReadOnly( err, 'ss', sumSqError );\n\tsetReadOnly( err, 'ms', meanSumSqError );\n\tsetReadOnly( out, 'error', err );\n\n\tsetReadOnly( out, 'statistic', fScore );\n\tsetReadOnly( out, 'pValue', pVal );\n\tsetReadOnly( out, 'means', means );\n\tsetReadOnly( out, 'method', 'One-Way ANOVA' );\n\tsetReadOnly( out, 'alpha', opts.alpha );\n\tsetReadOnly( out, 'rejected', pVal <= opts.alpha );\n\tsetReadOnly( out, 'print', prettyPrint( out ) );\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default anova1;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Returns default options.\n*\n* @private\n* @returns {Object} default options\n*/\nfunction defaults() {\n\treturn {\n\t\t'alpha': 0.05\n\t};\n}\n\n\n// EXPORTS //\n\nexport default defaults;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport hasOwnProp from '@stdlib/assert-has-own-property';\nimport isObject from '@stdlib/assert-is-plain-object';\nimport { isPrimitive as isNumber } from '@stdlib/assert-is-number';\nimport format from '@stdlib/error-tools-fmtprodmsg';\nimport isnan from '@stdlib/assert-is-nan';\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination object\n* @param {Options} options - function options\n* @param {number} [options.alpha] - significance level\n* @returns {(Error|null)} null or an error object\n*\n* @example\n* var opts = {};\n* var options = {\n*     'alpha': 0.6\n* };\n* var err = validate( opts, options );\n* if ( err ) {\n*     throw err;\n* }\n*/\nfunction validate( opts, options ) {\n\tif ( !isObject( options ) ) {\n\t\treturn new TypeError( format( '0tf2V', options ) );\n\t}\n\tif ( hasOwnProp( options, 'alpha' ) ) {\n\t\topts.alpha = options.alpha;\n\t\tif ( !isNumber( opts.alpha ) || isnan( opts.alpha ) ) {\n\t\t\treturn new TypeError( format( '0tf8P', 'alpha', opts.alpha ) );\n\t\t}\n\t\tif ( opts.alpha < 0.0 || opts.alpha > 1.0 ) {\n\t\t\treturn new RangeError( format( '0tf8V', 'alpha', opts.alpha ) );\n\t\t}\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nexport default validate;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport incrstdev from '@stdlib/stats-incr-stdev';\n\n\n// MAIN //\n\n/**\n* Computes the vector of means for each treatment.\n*\n* @private\n* @param {NumericArray} x - measured values\n* @param {Array} factor - array of treatments\n* @param {Array} treats - unique treatments\n* @returns {Object} summary statistics for the categories.\n*/\nfunction meanTable( x, factor, treats ) {\n\tvar tableOfMeans;\n\tvar factorCount;\n\tvar accumulator;\n\tvar newMean;\n\tvar j;\n\tvar i;\n\tvar k;\n\n\tfactorCount = treats.length;\n\ttableOfMeans = {};\n\tfor ( j = 0; j < factorCount; j++ ) {\n\t\taccumulator = incrstdev();\n\t\ttableOfMeans[ treats[j] ] = {\n\t\t\t'mean': 0,\n\t\t\t'sampleSize': 0,\n\t\t\t'SD': accumulator\n\t\t};\n\t\tfor ( i = 0; i < x.length; i++ ) {\n\t\t\tif ( factor[i] === treats[j] ) {\n\t\t\t\ttableOfMeans[ treats[j] ][ 'SD' ] = accumulator( x[i] );\n\t\t\t}\n\t\t}\n\t}\n\t// Go through, add to meanTable by indexing factor[i]\n\t// X[i] is the individual continuous\n\tfor ( i = 0; i < x.length; i++ ) {\n\t\ttableOfMeans[factor[i]]['mean'] += x[i];\n\t\ttableOfMeans[factor[i]]['sampleSize'] += 1;\n\t}\n\n\t// Now make the mean by dividing by the sample size\n\t// Get the standard deviation through the helper function\n\tfor ( k = 0; k < factorCount; k++ ) {\n\t\tnewMean = tableOfMeans[treats[k]]['mean'] / tableOfMeans[treats[k]]['sampleSize'];\n\t\ttableOfMeans[treats[k]]['mean'] = newMean;\n\t}\n\treturn tableOfMeans;\n}\n\n\n// EXPORTS //\n\nexport default meanTable;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Computes the arithmetic mean of a numeric array.\n*\n* @private\n* @param {NumericArray} arr - input array\n* @returns {number} arithmetic mean\n*/\nfunction mean( arr ) {\n\tvar delta;\n\tvar len;\n\tvar mu;\n\tvar i;\n\n\tmu = 0.0;\n\tlen = arr.length;\n\tfor ( i = 0; i < len; i++ ) {\n\t\tdelta = arr[ i ] - mu;\n\t\tmu += delta / (i+1);\n\t}\n\treturn mu;\n}\n\n\n// EXPORTS //\n\nexport default mean;\n"],"names":["SORT_OPTS","numeric","ascending","a","b","String","localeCompare","spaces","n","repeat","anova1","x","factor","options","meanSumSqTreat","meanSumSqError","ssTreatment","sumSqTotal","sumSqError","treatment","grandMean","nGroups","fScore","treats","means","numDf","denDf","nobs","pVal","opts","err","out","sq","i","results","isTypedArrayLike","isNumberArray","TypeError","format","alpha","arguments","length","isObject","hasOwnProp","isNumber","isnan","RangeError","validate","isArray","arr","len","val","j","Array","prototype","slice","call","sort","unique","tableOfMeans","factorCount","accumulator","newMean","k","incrstdev","mean","sampleSize","SD","meanTable","mu","cdf","setReadOnly","statistic","decision","treatMS","treatDF","treatSS","extra1","extra2","extra3","errMS","errDF","errSS","ndgts","dgts","str","isPositiveInteger","digits","isBoolean","method","roundn","ss","toString","error","ms","df","max","pValue","rejected"],"mappings":"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"}