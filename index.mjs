// Copyright (c) 2022 The Stdlib Authors. License is Apache-2.0: http://www.apache.org/licenses/LICENSE-2.0
/// <reference types="./index.d.ts" />
import t from"https://cdn.jsdelivr.net/gh/stdlib-js/assert-is-number-array@esm/index.mjs";import e from"https://cdn.jsdelivr.net/gh/stdlib-js/assert-is-typed-array-like@esm/index.mjs";import r from"https://cdn.jsdelivr.net/gh/stdlib-js/assert-is-array@esm/index.mjs";import n from"https://cdn.jsdelivr.net/gh/stdlib-js/utils-define-read-only-property@esm/index.mjs";import s from"https://cdn.jsdelivr.net/gh/stdlib-js/assert-has-own-property@esm/index.mjs";import i from"https://cdn.jsdelivr.net/gh/stdlib-js/string-format@esm/index.mjs";import a from"https://cdn.jsdelivr.net/gh/stdlib-js/stats-base-dists-f-cdf@esm/index.mjs";import o from"https://cdn.jsdelivr.net/gh/stdlib-js/utils-copy@esm/index.mjs";import l from"https://cdn.jsdelivr.net/gh/stdlib-js/assert-is-plain-object@esm/index.mjs";import m from"https://cdn.jsdelivr.net/gh/stdlib-js/assert-is-number@esm/index.mjs";import d from"https://cdn.jsdelivr.net/gh/stdlib-js/assert-is-nan@esm/index.mjs";import p from"https://cdn.jsdelivr.net/gh/stdlib-js/stats-incr-stdev@esm/index.mjs";import h from"https://cdn.jsdelivr.net/gh/stdlib-js/assert-is-positive-integer@esm/index.mjs";import g from"https://cdn.jsdelivr.net/gh/stdlib-js/math-base-special-roundn@esm/index.mjs";import u from"https://cdn.jsdelivr.net/gh/stdlib-js/string-repeat@esm/index.mjs";import f from"https://cdn.jsdelivr.net/gh/stdlib-js/math-base-special-max@esm/index.mjs";import j from"https://cdn.jsdelivr.net/gh/stdlib-js/assert-is-boolean@esm/index.mjs";var c={alpha:.05},v=s,b=l,w=m.isPrimitive,y=i,S=d;var x=function(t,e){if(!b(e))return new TypeError(y("invalid argument. Options argument must be an object. Value: `%s`.",e));if(v(e,"alpha")){if(t.alpha=e.alpha,!w(t.alpha)||S(t.alpha))return new TypeError(y("invalid option. `%s` option must be a number. Option: `%s`.","alpha",t.alpha));if(t.alpha<0||t.alpha>1)return new RangeError(y("invalid option. `%s` must be a number in [0,1]. Option: `%f`.","alpha",alpha))}return null},E={numeric:!0};function V(t,e){return String(t).localeCompare(String(e),void 0,E)}var T=function(t){var e,r,n,s,i;for(e=(r=Array.prototype.slice.call(t)).length,r.sort(V),s=1,i=0;s<e;s++)n=r[s],r[i]!==n&&(r[i+=1]=n);return r.length=i+1,r},A=p;var O=function(t,e,r){var n,s,i,a,o,l,m;for(s=r.length,n={},o=0;o<s;o++)for(i=A(),n[r[o]]={mean:0,sampleSize:0,SD:i},l=0;l<t.length;l++)e[l]===r[o]&&(n[r[o]].SD=i(t[l]));for(l=0;l<t.length;l++)n[e[l]].mean+=t[l],n[e[l]].sampleSize+=1;for(m=0;m<s;m++)a=n[r[m]].mean/n[r[m]].sampleSize,n[r[m]].mean=a;return n};var R=function(t){var e,r,n;for(r=0,e=t.length,n=0;n<e;n++)r+=(t[n]-r)/(n+1);return r},F=h,z=l,N=s,q=g,M=u,P=f,D=j.isPrimitive,H=i;function k(t){return t<=0?"":M(" ",t)}var C=function(t){return function(e){var r,n,s,i,a,o,l,m,d,p,h,g,u,f;if(u=4,n=!0,arguments.length>0){if(!z(e))throw new TypeError(H("invalid argument. First argument must be an options object. Value: `%s`.",e));if(N(e,"digits")){if(!F(e.digits))throw new TypeError(H("invalid option. `%s` option must be a positive integer. Option: `%s`.","digits",e.digits));u=e.digits}if(N(e,"decision")){if(!D(e.decision))throw new TypeError(H("invalid option. `%s` option must be a boolean. Option: `%s`.","decision",e.decision));n=e.decision}}g=-u,f="",f+=t.method,f+="\n\n",f+="Null Hypothesis: All Means Equal",f+="\n",f+="Alternate Hypothesis: At Least one Mean not Equal",f+="\n\n",a=q(t.treatment.ss,g).toString(),h=q(t.error.ss,g).toString(),s=q(t.treatment.ms,g).toString(),d=q(t.error.ms,g).toString(),i=t.treatment.df.toString(),p=t.error.df.toString(),r=q(t.statistic,g).toString(),o=P(P(i.length,p.length),2),l=P(P(a.length,h.length),2),m=P(P(s.length,d.length),3),f+="              ",f+="df",f+=k(1+o),f+="SS",f+=k(2+l),f+="MS",f+=k(1+m),f+="F Score",f+=k(P(7,r.length)-7+2),f+="P Value",f+="\n",f+="Treatment",f+=k(5),f+=t.treatment.df,f+=k(3+o-i.length),f+=a,f+=k(4+l-a.length),f+=s,f+=k(3+m-s.length),f+=r,f+=k(P(7,r.length)-r.length+2),f+=q(t.pValue,g),f+="\n",f+="Errors",f+="        ",f+=t.error.df,f+=k(3+o-p.length),f+=h,f+=k(4+l-h.length),f+=d,n&&(f+="\n\n",t.rejected?(f+="Reject Null: ",f+=q(t.pValue,g),f+=" <= ",f+=t.alpha):(f+="Fail to Reject Null: ",f+=q(t.pValue,g),f+=" >= ",f+=t.alpha));return f}},L=t.primitives,W=e,B=r,G=n,I=s,J=i,K=a,Q=o,U=c,X=x,Y=T,Z=O,$=R,_=C;var tt=function(t,e,r){var n,s,i,a,o,l,m,d,p,h,g,u,f,j,c,v,b,w,y,S;if(!W(t)&&!L(t))throw new TypeError(J("invalid argument. First argument must be a numeric array. Value: `%s`.",t));if(v=Q(U),arguments.length>2&&(b=X(v,r)))throw b;if((j=t.length)<=1)throw new RangeError(J("invalid argument. First argument must have at least two elements. Value: `%s`.",t));if(!B(e))throw new TypeError(J("invalid argument. Second argument must be an array. Value: `%s`.",h));if((d=(h=Y(e)).length)<=1)throw new RangeError(J("invalid argument. Second argument must contain at least two unique elements. Value: `%s`.",h));if(j!==e.length)throw new RangeError("invalid arguments. Arguments `x` and `factor` must be arrays of the same length.");for(a=0,i=0,g=Z(t,e,h),m=$(t),S=0;S<j;S++)a+=y=(t[S]-m)*(t[S]-m);for(l in y=0,g)I(g,l)&&(y=(g[l].mean-m)*(g[l].mean-m),i+=g[l].sampleSize*y);return c=1-K(p=(n=i/(u=d-1))/(s=(o=a-i)/(f=j-d)),u,f),w={},G(l={},"df",u),G(l,"ss",i),G(l,"ms",n),G(w,"treatment",l),G(b={},"df",f),G(b,"ss",o),G(b,"ms",s),G(w,"error",b),G(w,"statistic",p),G(w,"pValue",c),G(w,"means",g),G(w,"method","One-Way ANOVA"),G(w,"alpha",v.alpha),G(w,"rejected",c<=v.alpha),G(w,"print",_(w)),w};export{tt as default};
//# sourceMappingURL=index.mjs.map
