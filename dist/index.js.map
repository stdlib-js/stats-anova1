{
  "version": 3,
  "sources": ["../lib/defaults.js", "../lib/validate.js", "../lib/unique.js", "../lib/mean_table.js", "../lib/mean.js", "../lib/print.js", "../lib/main.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Returns default options.\n*\n* @private\n* @returns {Object} default options\n*/\nfunction defaults() {\n\treturn {\n\t\t'alpha': 0.05\n\t};\n}\n\n\n// EXPORTS //\n\nmodule.exports = defaults;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar hasOwnProp = require( '@stdlib/assert-has-own-property' );\nvar isObject = require( '@stdlib/assert-is-plain-object' );\nvar isNumber = require( '@stdlib/assert-is-number' ).isPrimitive;\nvar format = require( '@stdlib/string-format' );\nvar isnan = require( '@stdlib/assert-is-nan' );\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination object\n* @param {Options} options - function options\n* @param {number} [options.alpha] - significance level\n* @returns {(Error|null)} null or an error object\n*\n* @example\n* var opts = {};\n* var options = {\n*     'alpha': 0.6\n* };\n* var err = validate( opts, options );\n* if ( err ) {\n*     throw err;\n* }\n*/\nfunction validate( opts, options ) {\n\tif ( !isObject( options ) ) {\n\t\treturn new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t}\n\tif ( hasOwnProp( options, 'alpha' ) ) {\n\t\topts.alpha = options.alpha;\n\t\tif ( !isNumber( opts.alpha ) || isnan( opts.alpha ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a number. Option: `%s`.', 'alpha', opts.alpha ) );\n\t\t}\n\t\tif ( opts.alpha < 0.0 || opts.alpha > 1.0 ) {\n\t\t\treturn new RangeError( format( 'invalid option. `%s` option must be a number on the interval: [0, 1]. Option: `%f`.', 'alpha', opts.alpha ) );\n\t\t}\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nmodule.exports = validate;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// VARIABLES //\n\nvar SORT_OPTS = {\n\t'numeric': true // Use numeric collation such that \"1\" < \"2\" < \"10\"...\n};\n\n\n// FUNCTIONS //\n\n/**\n* Comparator function to sort values in ascending order.\n*\n* @private\n* @param {*} a - first value\n* @param {*} b - second value\n* @returns {number} negative number if `a` comes before `b, positive if `a` comes after `b`, and `0` if they are equivalent\n*/\nfunction ascending( a, b ) {\n\treturn String( a ).localeCompare( String( b ), void 0, SORT_OPTS );\n}\n\n\n// MAIN //\n\n/**\n* Returns the unique elements in an array.\n*\n* @private\n* @param {Array} arr - input array\n* @returns {Array} array of unique elements\n*/\nfunction unique( arr ) {\n\tvar len;\n\tvar out;\n\tvar val;\n\tvar i;\n\tvar j;\n\n\t// Copy the array to avoid mutation:\n\tout = Array.prototype.slice.call( arr );\n\tlen = out.length;\n\n\t// Sort array in ascending order:\n\tout.sort( ascending );\n\n\t// Loop through the array, only incrementing a pointer when successive values are different. When a succeeding value is different, move the pointer and set the next value. In the trivial case where all array elements are unique, we incur a slight penalty in resetting the element value for each unique value. In other cases, we simply move a unique value to a new position in the array. The end result is a sorted array with unique values.\n\tfor ( i = 1, j = 0; i < len; i++ ) {\n\t\tval = out[ i ];\n\t\tif ( out[ j ] !== val ) {\n\t\t\tj += 1;\n\t\t\tout[ j ] = val;\n\t\t}\n\t}\n\t// Truncate the array:\n\tout.length = j+1;\n\treturn out;\n}\n\n\n// EXPORTS //\n\nmodule.exports = unique;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar incrstdev = require( '@stdlib/stats-incr-stdev' );\n\n\n// MAIN //\n\n/**\n* Computes the vector of means for each treatment.\n*\n* @private\n* @param {NumericArray} x - measured values\n* @param {Array} factor - array of treatments\n* @param {Array} treats - unique treatments\n* @returns {Object} summary statistics for the categories.\n*/\nfunction meanTable( x, factor, treats ) {\n\tvar tableOfMeans;\n\tvar factorCount;\n\tvar accumulator;\n\tvar newMean;\n\tvar j;\n\tvar i;\n\tvar k;\n\n\tfactorCount = treats.length;\n\ttableOfMeans = {};\n\tfor ( j = 0; j < factorCount; j++ ) {\n\t\taccumulator = incrstdev();\n\t\ttableOfMeans[ treats[j] ] = {\n\t\t\t'mean': 0,\n\t\t\t'sampleSize': 0,\n\t\t\t'SD': accumulator\n\t\t};\n\t\tfor ( i = 0; i < x.length; i++ ) {\n\t\t\tif ( factor[i] === treats[j] ) {\n\t\t\t\ttableOfMeans[ treats[j] ][ 'SD' ] = accumulator( x[i] );\n\t\t\t}\n\t\t}\n\t}\n\t// Go through, add to meanTable by indexing factor[i]\n\t// X[i] is the individual continuous\n\tfor ( i = 0; i < x.length; i++ ) {\n\t\ttableOfMeans[factor[i]]['mean'] += x[i];\n\t\ttableOfMeans[factor[i]]['sampleSize'] += 1;\n\t}\n\n\t// Now make the mean by dividing by the sample size\n\t// Get the standard deviation through the helper function\n\tfor ( k = 0; k < factorCount; k++ ) {\n\t\tnewMean = tableOfMeans[treats[k]]['mean'] / tableOfMeans[treats[k]]['sampleSize'];\n\t\ttableOfMeans[treats[k]]['mean'] = newMean;\n\t}\n\treturn tableOfMeans;\n}\n\n\n// EXPORTS //\n\nmodule.exports = meanTable;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Computes the arithmetic mean of a numeric array.\n*\n* @private\n* @param {NumericArray} arr - input array\n* @returns {number} arithmetic mean\n*/\nfunction mean( arr ) {\n\tvar delta;\n\tvar len;\n\tvar mu;\n\tvar i;\n\n\tmu = 0.0;\n\tlen = arr.length;\n\tfor ( i = 0; i < len; i++ ) {\n\t\tdelta = arr[ i ] - mu;\n\t\tmu += delta / (i+1);\n\t}\n\treturn mu;\n}\n\n\n// EXPORTS //\n\nmodule.exports = mean;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isPositiveInteger = require( '@stdlib/assert-is-positive-integer' );\nvar isObject = require( '@stdlib/assert-is-plain-object' );\nvar hasOwnProp = require( '@stdlib/assert-has-own-property' );\nvar roundn = require( '@stdlib/math-base-special-roundn' );\nvar repeat = require( '@stdlib/string-repeat' );\nvar max = require( '@stdlib/math-base-special-max' );\nvar isBoolean = require( '@stdlib/assert-is-boolean' ).isPrimitive;\nvar format = require( '@stdlib/string-format' );\n\n\n// FUNCTIONS //\n\n/**\n* Returns n spaces.\n*\n* @private\n* @param {integer} n - number of spaces\n* @returns {string} n spaces\n*/\nfunction spaces( n ) {\n\tif ( n <= 0 ) {\n\t\treturn '';\n\t}\n\treturn repeat( ' ', n );\n}\n\n\n// MAIN //\n\n/**\n* Returns a function to pretty print test results.\n*\n* @private\n* @param {Object} results - test results\n* @returns {Function} pretty print function\n*/\nfunction prettyPrint( results ) {\n\treturn print;\n\n\t/**\n\t* Pretty-print output of ANOVA.\n\t*\n\t* @private\n\t* @param {Object} [opts] - options object\n\t* @param {PositiveInteger} [opts.digits=4] - number of digits after the decimal point\n\t* @param {boolean} [opts.decision=true] - boolean indicating whether to print the test decision\n\t* @throws {TypeError} options argument must be an object\n\t* @throws {TypeError} must provide valid options\n\t* @returns {string} formatted results\n\t*/\n\tfunction print( opts ) {\n\t\tvar statistic;\n\t\tvar decision;\n\t\tvar treatMS;\n\t\tvar treatDF;\n\t\tvar treatSS;\n\t\tvar extra1;\n\t\tvar extra2;\n\t\tvar extra3;\n\t\tvar errMS;\n\t\tvar errDF;\n\t\tvar errSS;\n\t\tvar ndgts;\n\t\tvar dgts;\n\t\tvar str;\n\n\t\tdgts = 4;\n\t\tdecision = true;\n\t\tif ( arguments.length > 0 ) {\n\t\t\tif ( !isObject( opts ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid argument. First argument must be an object. Value: `%s`.', opts ) );\n\t\t\t}\n\t\t\tif ( hasOwnProp( opts, 'digits' ) ) {\n\t\t\t\tif ( !isPositiveInteger( opts.digits ) ) {\n\t\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a positive integer. Option: `%s`.', 'digits', opts.digits ) );\n\t\t\t\t}\n\t\t\t\tdgts = opts.digits;\n\t\t\t}\n\t\t\tif ( hasOwnProp( opts, 'decision' ) ) {\n\t\t\t\tif ( !isBoolean( opts.decision ) ) {\n\t\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a boolean. Option: `%s`.', 'decision', opts.decision ) );\n\t\t\t\t}\n\t\t\t\tdecision = opts.decision;\n\t\t\t}\n\t\t}\n\t\tndgts = -dgts;\n\n\t\tstr = '';\n\t\tstr += results.method;\n\t\tstr += '\\n\\n';\n\n\t\t// Hypothesis\n\t\tstr += 'Null Hypothesis: All Means Equal';\n\t\tstr += '\\n';\n\t\tstr += 'Alternate Hypothesis: At Least one Mean not Equal';\n\t\tstr += '\\n\\n';\n\n\t\ttreatSS = roundn( results.treatment.ss, ndgts ).toString();\n\t\terrSS = roundn( results.error.ss, ndgts ).toString();\n\t\ttreatMS = roundn( results.treatment.ms, ndgts ).toString();\n\t\terrMS = roundn( results.error.ms, ndgts ).toString();\n\t\ttreatDF = results.treatment.df.toString();\n\t\terrDF = results.error.df.toString();\n\t\tstatistic = roundn( results.statistic, ndgts ).toString();\n\n\t\textra1 = max( max( treatDF.length, errDF.length ), 2 );\n\t\textra2 = max( max( treatSS.length, errSS.length ), 2 );\n\t\textra3 = max( max( treatMS.length, errMS.length ), 3 );\n\n\t\t// Formatted table\n\t\tstr += '              ';\n\t\tstr += 'df';\n\t\tstr += spaces( 1 + extra1 );\n\t\tstr += 'SS';\n\t\tstr += spaces( 2 + extra2 );\n\t\tstr += 'MS';\n\t\tstr += spaces( 1 + extra3 );\n\t\tstr += 'F Score';\n\t\tstr += spaces( max( 7, statistic.length ) - 7 + 2 );\n\t\tstr += 'P Value';\n\t\tstr += '\\n';\n\n\t\t// Now start adding in values\n\t\tstr += 'Treatment';\n\t\tstr += spaces( 5 );\n\t\tstr += results.treatment.df;\n\t\tstr += spaces( 3 + extra1 - treatDF.length );\n\n\t\tstr += treatSS;\n\t\tstr += spaces( 4 + extra2 - treatSS.length );\n\t\tstr += treatMS;\n\t\tstr += spaces( 3 + extra3 - treatMS.length );\n\t\tstr += statistic;\n\t\tstr += spaces( max( 7, statistic.length ) - statistic.length + 2 );\n\t\tstr += roundn( results.pValue, ndgts );\n\t\tstr += '\\n';\n\n\t\t// Next line\n\t\tstr += 'Errors';\n\t\tstr += '        ';\n\t\tstr += results.error.df;\n\t\tstr += spaces( 3 + extra1 - errDF.length );\n\t\tstr += errSS;\n\t\tstr += spaces( 4 + extra2 - errSS.length );\n\t\tstr += errMS;\n\n\t\tif ( decision ) {\n\t\t\tstr += '\\n\\n';\n\t\t\tif ( results.rejected ) {\n\t\t\t\tstr += 'Reject Null: ';\n\t\t\t\tstr += roundn( results.pValue, ndgts );\n\t\t\t\tstr += ' <= ';\n\t\t\t\tstr += results.alpha;\n\t\t\t} else {\n\t\t\t\tstr += 'Fail to Reject Null: ';\n\t\t\t\tstr += roundn( results.pValue, ndgts );\n\t\t\t\tstr += ' >= ';\n\t\t\t\tstr += results.alpha;\n\t\t\t}\n\t\t}\n\t\treturn str;\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = prettyPrint;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isNumberArray = require( '@stdlib/assert-is-number-array' ).primitives;\nvar isTypedArrayLike = require( '@stdlib/assert-is-typed-array-like' );\nvar isArray = require( '@stdlib/assert-is-array' );\nvar setReadOnly = require( '@stdlib/utils-define-read-only-property' );\nvar hasOwnProp = require( '@stdlib/assert-has-own-property' );\nvar format = require( '@stdlib/string-format' );\nvar cdf = require( '@stdlib/stats-base-dists-f-cdf' );\nvar defaults = require( './defaults.js' );\nvar validate = require( './validate.js' );\nvar unique = require( './unique.js' );\nvar meanTable = require( './mean_table.js' );\nvar mean = require( './mean.js' );\nvar prettyPrint = require( './print.js' );\n\n\n// MAIN //\n\n/**\n* Perform a one-way analysis of variance (ANOVA).\n*\n* @param {NumericArray} x - measured values\n* @param {Array} factor - array of treatments\n* @param {Options} [options] - function options\n* @param {number} [options.alpha=0.05] - significance level\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {TypeError} first argument must be a numeric array\n* @throws {TypeError} second argument must be an array\n* @throws {RangeError} `factor` must contain at least two unique elements\n* @throws {RangeError} length of `x` must be greater than or equal to two\n* @throws {RangeError} `x` and `factor` must have the same length\n* @returns {Object} test results\n*/\nfunction anova1( x, factor, options ) {\n\tvar meanSumSqTreat; // Mean sum of squares\n\tvar meanSumSqError;\n\tvar ssTreatment;\n\tvar sumSqTotal;\n\tvar sumSqError;\n\tvar treatment; // Index variable\n\tvar grandMean;\n\tvar nGroups;\n\tvar fScore;\n\tvar treats;\n\tvar means;\n\tvar numDf;\n\tvar denDf;\n\tvar nobs;\n\tvar pVal;\n\tvar opts;\n\tvar err;\n\tvar out;\n\tvar sq;\n\tvar i;\n\n\tif ( !isTypedArrayLike( x ) && !isNumberArray( x ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a numeric array. Value: `%s`.', x ) );\n\t}\n\topts = defaults();\n\tif ( arguments.length > 2 ) {\n\t\terr = validate( opts, options );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t}\n\tnobs = x.length;\n\tif ( nobs <= 1 ) {\n\t\tthrow new RangeError( format( 'invalid argument. First argument must contain at least two elements. Value: `%s`.', x ) );\n\t}\n\tif ( !isArray( factor ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Second argument must be an array. Value: `%s`.', treats ) );\n\t}\n\n\ttreats = unique( factor );\n\tnGroups = treats.length;\n\tif ( nGroups <= 1 ) {\n\t\tthrow new RangeError( format( 'invalid argument. Second argument must contain at least two unique elements. Value: `%s`.', treats ) );\n\t}\n\tif ( nobs !== factor.length ) {\n\t\tthrow new RangeError( 'invalid arguments. First and second arguments must be arrays having the same length.' );\n\t}\n\n\tsumSqTotal = 0.0;\n\tssTreatment = 0.0;\n\tmeans = meanTable( x, factor, treats );\n\tgrandMean = mean( x );\n\n\t// Now get total ss:\n\tfor ( i = 0; i < nobs; i++ ) {\n\t\tsq = ( x[i] - grandMean ) * ( x[i] - grandMean );\n\t\tsumSqTotal += sq;\n\t}\n\n\tsq = 0.0;\n\tfor ( treatment in means ) {\n\t\tif ( hasOwnProp( means, treatment ) ) {\n\t\t\t// Already have sq defined\n\t\t\tsq = ( means[treatment].mean - grandMean ) *\n\t\t\t\t( means[treatment].mean - grandMean );\n\t\t\tssTreatment += means[treatment].sampleSize * sq;\n\t\t}\n\t}\n\tnumDf = nGroups - 1;\n\tdenDf = nobs - nGroups;\n\tsumSqError = sumSqTotal - ssTreatment;\n\tmeanSumSqTreat = ssTreatment / numDf;\n\tmeanSumSqError = sumSqError / denDf;\n\tfScore = meanSumSqTreat / meanSumSqError;\n\n\tpVal = 1.0 - cdf( fScore, numDf, denDf );\n\n\tout = {};\n\n\ttreatment = {};\n\tsetReadOnly( treatment, 'df', numDf );\n\tsetReadOnly( treatment, 'ss', ssTreatment );\n\tsetReadOnly( treatment, 'ms', meanSumSqTreat );\n\tsetReadOnly( out, 'treatment', treatment );\n\n\terr = {};\n\tsetReadOnly( err, 'df', denDf );\n\tsetReadOnly( err, 'ss', sumSqError );\n\tsetReadOnly( err, 'ms', meanSumSqError );\n\tsetReadOnly( out, 'error', err );\n\n\tsetReadOnly( out, 'statistic', fScore );\n\tsetReadOnly( out, 'pValue', pVal );\n\tsetReadOnly( out, 'means', means );\n\tsetReadOnly( out, 'method', 'One-Way ANOVA' );\n\tsetReadOnly( out, 'alpha', opts.alpha );\n\tsetReadOnly( out, 'rejected', pVal <= opts.alpha );\n\tsetReadOnly( out, 'print', prettyPrint( out ) );\n\treturn out;\n}\n\n\n// EXPORTS //\n\nmodule.exports = anova1;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* One-way analysis of variance.\n*\n* @module @stdlib/stats-anova1\n*\n* @example\n* var anova1 = require( '@stdlib/stats-anova1' );\n* var x = [ 1, 3, 5, 2, 4, 6, 8, 7, 10, 11, 12, 15 ];\n* var f = [ 'control', 'treatA', 'treatB', 'treatC', 'control', 'treatA', 'treatB', 'treatC', 'control', 'treatA', 'treatB', 'treatC' ];\n*\n* var out = anova1( x, f );\n* /* returns\n*     {\n*         'treatment': {\n*             'df': 3,\n*             'ss': ~20.667,\n*             'ms': ~6.889\n*          }\n*         'error': {\n*             'df': 8,\n*             'ss': ~185.333,\n*             'ms': ~23.1667,\n*         },\n*         'statistic': ~0.297,\n*         'pValue': ~0.826,\n*         'means': { 'control': { 'mean': 5.0, 'sampleSize': 3, 'SD': ~4.583 },\n*            'treatA': { 'mean': ~6.667, 'sampleSize': 3, 'SD': ~4.041 },\n*            'treatB': { 'mean': ~8.333, 'sampleSize': 3, 'SD': ~3.512 },\n*            'treatC': { 'mean': 8.0, 'sampleSize': 3, 'SD': ~6.557 }\n*         },\n*         'method': 'One-Way ANOVA'\n*     }\n* *\\/\n*\n* var table = out.print();\n* /*\n* One-Way ANOVA\n*\n* Null Hypothesis: All Means Equal\n* Alternate Hypothesis: At Least one Mean not Equal\n*\n*               df   SS          MS        F Score  P Value\n* Treatment     3    20.6667     6.8889    0.2974   0.8265\n* Errors        8    185.3333    23.1667\n*\n* Fail to Reject Null: 0.8265 >= 0.05\n*\n* *\\/\n*/\n\n// MODULES //\n\nvar anova1 = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = anova1;\n"],
  "mappings": "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",
  "names": ["require_defaults", "__commonJSMin", "exports", "module", "defaults", "require_validate", "__commonJSMin", "exports", "module", "hasOwnProp", "isObject", "isNumber", "format", "isnan", "validate", "opts", "options", "require_unique", "__commonJSMin", "exports", "module", "SORT_OPTS", "ascending", "a", "b", "unique", "arr", "len", "out", "val", "i", "j", "require_mean_table", "__commonJSMin", "exports", "module", "incrstdev", "meanTable", "x", "factor", "treats", "tableOfMeans", "factorCount", "accumulator", "newMean", "j", "k", "require_mean", "__commonJSMin", "exports", "module", "mean", "arr", "delta", "len", "mu", "i", "require_print", "__commonJSMin", "exports", "module", "isPositiveInteger", "isObject", "hasOwnProp", "roundn", "repeat", "max", "isBoolean", "format", "spaces", "n", "prettyPrint", "results", "print", "opts", "statistic", "decision", "treatMS", "treatDF", "treatSS", "extra1", "extra2", "extra3", "errMS", "errDF", "errSS", "ndgts", "dgts", "str", "require_main", "__commonJSMin", "exports", "module", "isNumberArray", "isTypedArrayLike", "isArray", "setReadOnly", "hasOwnProp", "format", "cdf", "defaults", "validate", "unique", "meanTable", "mean", "prettyPrint", "anova1", "x", "factor", "options", "meanSumSqTreat", "meanSumSqError", "ssTreatment", "sumSqTotal", "sumSqError", "treatment", "grandMean", "nGroups", "fScore", "treats", "means", "numDf", "denDf", "nobs", "pVal", "opts", "err", "out", "sq", "i", "anova1"]
}
